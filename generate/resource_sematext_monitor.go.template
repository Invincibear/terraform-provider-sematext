package sematext

/*
	Note: Generated file, any edits will be overwritten!
	Correct way to alter is to edit generate/resource_sematext_monitor.go.template
	Then run generate/generate.sh
*/

import (
	"context"

	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
)

// resourceSematextMonitor<<CLASS_NAME>> is the resource class that handles <<RESOURCE_NAME>>
func resourceSematextMonitor<<CLASS_NAME>>() *schema.Resource {

	fieldSchema := MonitorSchemaCommon("<<APP_TYPE>>")

	return &schema.Resource{
		CreateContext: resourceMonitorCreate<<CLASS_NAME>>,
		ReadContext:   resourceMonitorRead<<CLASS_NAME>>,
		UpdateContext: resourceMonitorUpdate<<CLASS_NAME>>,
		DeleteContext: resourceMonitorDelete<<CLASS_NAME>>,
		Schema: fieldSchema,
	}
}

// resourceMonitorCreate<<CLASS_NAME>> creates the <<RESOURCE_NAME>> resource.
func resourceMonitorCreate<<CLASS_NAME>>(ctx context.Context, d *schema.ResourceData, meta interface{}) diag.Diagnostics {
	apptype := "<<APP_TYPE>>"
	err := CommonMonitorCreate(ctx, d, meta, apptype)

	return err
}

// resourceMonitorRead<<CLASS_NAME>> reads the <<RESOURCE_NAME>> resource from Sematext Cloud.
func resourceMonitorRead<<CLASS_NAME>>(ctx context.Context, d *schema.ResourceData, meta interface{}) diag.Diagnostics {
	apptype := "<<APP_TYPE>>"
	return CommonMonitorRead(ctx, d, meta, apptype)
}

// resourceMonitorUpdate<<CLASS_NAME>> updates Sematext Cloud from the <<RESOURCE_NAME>> resource.
func resourceMonitorUpdate<<CLASS_NAME>>(ctx context.Context, d *schema.ResourceData, meta interface{}) diag.Diagnostics {
	apptype := "<<APP_TYPE>>"
	return CommonMonitorUpdate(ctx, d, meta, apptype)
}

// resourceMonitorDelete<<CLASS_NAME>> marks a <<RESOURCE_NAME>> resource as retired.
func resourceMonitorDelete<<CLASS_NAME>>(ctx context.Context, d *schema.ResourceData, meta interface{}) diag.Diagnostics {
	apptype := "<<APP_TYPE>>"
	return CommonMonitorDelete(ctx, d, meta, apptype)
}

/*

Placeholder - not implemented

// resourceSematextMonitorImport<<CLASS_NAME>> checks a <<RESOURCE_NAME>> resource exists in Sematext Cloud.
func resourceSematextMonitorImport<<CLASS_NAME>>(d *schema.ResourceData, meta interface{}) ([]*schema.ResourceData, error) {
	apptype := "<<APP_TYPE>>"
	return CommonMonitorImport(d, meta, apptype)
}

*/
